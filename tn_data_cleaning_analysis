---
title: "Test"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

Load data 
```{r}
setwd("S:/Indiana Research & Evaluation/Matthew Hanauer/CTS_grant_docs/Otsuka/data")
tn_schiz_data = read.csv("TN_schiz_data.csv", header = TRUE)
### Need Client.ID, Admission.Last.Service.Date, Service.Location.County, Diagnosis.Type.Diagnosis.Description, Client.Intake.Referrals.Client.Age, Gender.Gender, Race.Type.Race.Type
tn_schiz_dat = tn_schiz_data[c("Client.ID", "Admission.Last.Service.Date", "Service.Location.County", "Diagnosis.Type.Diagnosis.Description", "Client.Intake.Referrals.Client.Age", "Gender.Gender", "Race.Type.Race.Type")]
names(tn_schiz_dat) = c("client_id", "admin_date", "county", "diagnosis", "age", "gender", "race")
tn_schiz_dat
library(prettyR)
# Check for variables outside of reasonable range
apply(tn_schiz_dat[,2:7], 2, function(x){describe.factor(x)})
```
Subset by 18 and older and between  May 1, 2019 and August 2020
Don't have May 1 2019 starting at July 1 2019
```{r}
tn_schiz_dat = subset(tn_schiz_dat, age > 17)
sum(tn_schiz_dat$age < 18)
library(lubridate)
tn_schiz_dat$admin_date = ymd(tn_schiz_dat$admin_date)
tn_schiz_dat$admin_date = floor_date(tn_schiz_dat$admin_date, unit = c("month"))
tn_schiz_dat = subset(tn_schiz_dat, admin_date >= "2019-05-01" & admin_date <= "2020-08-31")
sum(tn_schiz_dat$admin_date < "2019-05-01" | tn_schiz_dat$admin_date > "2020-08-31")

```
Need one record by client with the primary diagnosis OR the diagnosis that trumps “unspecified”
For duplicates identified those with the first ID as unspecified
Then 
Assuming duplicate diagnoses are repeats need to check this assumption and try to find secondary and third diag
```{r}
library(dplyr)
tn_schiz_dat$dup_var =  duplicated(tn_schiz_dat$client_id)
tn_schiz_dat
# sort by id
tn_schiz_dat = tn_schiz_dat[order(tn_schiz_dat$client_id),]
# Shows that code below works
#vec <- c("a", "b", "c","c","c")
#vec =  vec %in% unique(vec[ duplicated(vec)]) 
#vec
tn_schiz_dat$dup_var_all =  tn_schiz_dat$client_id %in% unique(tn_schiz_dat$client_id[duplicated(tn_schiz_dat$client_id)])
tn_schiz_dat$first_dup = ifelse(tn_schiz_dat$dup_var == FALSE & tn_schiz_dat$dup_var_all == TRUE, 1, 0)
tn_schiz_dat$uspec_first_dup
### Check that are no more than 2 duplicates
count_id =  tn_schiz_dat %>% count(client_id)
# There are up to six instances / diagnosis per client
describe.factor(count_id$n)
```
1. Get non-first duplicate id and unspecified
2. Drop those who have non-first duplicate id and unspecified
3. Get first duplicate id and unspecified
4. Drop those who have first duplicate id and unspecifed
5. Drop remaining duplicates leaving you with highest diagnosis level that is not unspecified
```{r}
describe.factor(tn_schiz_dat$diagnosis)
tn_schiz_dat$dup_diag_not_unspec = ifelse(tn_schiz_dat$dup_var_all == 1 & tn_schiz_dat$diagnosis == "UNSPECIFIED SCHIZOPHRENIA SPECTRUM AND OTHER PSYCHOTIC DISORDER", 1, 0)
tn_schiz_dat$non_first_dup_and_unspec = ifelse(tn_schiz_dat$dup_var == TRUE & tn_schiz_dat$diagnosis == "UNSPECIFIED SCHIZOPHRENIA SPECTRUM AND OTHER PSYCHOTIC DISORDER", 1, 0)
tn_schiz_dat = subset(tn_schiz_dat, non_first_dup_and_unspec == 0)
tn_schiz_dat$first_dup_unspec = ifelse(tn_schiz_dat$first_dup == TRUE & tn_schiz_dat$diagnosis == "UNSPECIFIED SCHIZOPHRENIA SPECTRUM AND OTHER PSYCHOTIC DISORDER", 1, 0)
### EVen though no instances just drop in case you load in data later with repeats
tn_schiz_dat = subset(tn_schiz_dat, first_dup_unspec == 0)
### Keep highest level of diagnosis that is not unspecified
tn_schiz_dat = subset(tn_schiz_dat, dup_var == FALSE)
n = dim(tn_schiz_dat)[1]
tn_schiz_dat$admin_date = floor_date(tn_schiz_dat$admin_date, unit = c("month"))
tn_schiz_dat = tn_schiz_dat[,c(1:7)]
tn_schiz_dat$schz = rep(1, dim(tn_schiz_dat)[1])
```
Table by diagnosis
```{r}
count_diag = tn_schiz_dat %>% count(diagnosis)
count_diag = count_diag[order(count_diag$n, decreasing = TRUE),]
count_diag
```
Table by month for all diagnoses
Need to get the number of clients served per year, but even with that this is a very large spike

```{r}

count_month = tn_schiz_dat %>% group_by(admin_date) %>% count(schz)
count_month$percentage_pop = round(count_month$n / n,2)*100
count_month
```
Table by county by four month period
We want the count by four month period (May 2019 to Aug 2019) and compare to same period 2020 by county and state
Start with county then get state
```{r}
n = dim(tn_schiz_dat)[1]
# Create the two four month indicators May_2019_Aug_2019 and May_2020_Aug_2020
tn_schiz_dat$month_indicator = ifelse(tn_schiz_dat$admin_date >= "2019-05-01" & tn_schiz_dat$admin_date <= "2019-08-01", "May_2019_Aug_2019", ifelse(tn_schiz_dat$admin_date >= "2020-05-01" & tn_schiz_dat$admin_date <= "2020-08-01",  "May_2020_Aug_2020", "Wrong"))
count_county = subset(tn_schiz_dat,month_indicator != "Wrong")
library(tidyverse)
## Need this plus .drop = FALSE to include counting zeros
count_county <- count_county %>% modify_if(is.character, as.factor)
count_county
count_county = count_county %>% group_by(county, month_indicator) %>%  count(schz, .drop = FALSE)
count_county
May_2019_Aug_2019 = subset(count_county, month_indicator == "May_2019_Aug_2019")
May_2020_Aug_2020 = subset(count_county, month_indicator == "May_2020_Aug_2020") 
count_county = data.frame(county = May_2019_Aug_2019$county, May_2019_Aug_2019 = May_2019_Aug_2019$n , May_2020_Aug_2020 = May_2020_Aug_2020$n)
count_county
```
Monthly count of all diagnosis by count
```{r}
month_by_diag_fun = function(data){

data$month_indicator = ifelse(data$admin_date >= "2019-05-01" & data$admin_date <= "2019-08-01", "May_2019_Aug_2019", ifelse(data$admin_date >= "2020-05-01" & data$admin_date <= "2020-08-01",  "May_2020_Aug_2020", "Wrong"))
count_county = subset(data,month_indicator != "Wrong")
count_county$month_indicator = NULL
count_county <- count_county %>% modify_if(is.character, as.factor)
count_county = count_county %>% group_by(admin_date, county) %>%  count(schz, .drop = FALSE)
count_county$schz = NULL
# Add back later "2019-05-01", "2019-06-01",
month_list = list("2019-07-01", "2019-08-01", "2020-05-01", "2020-06-01", "2020-07-01", "2020-08-01")
out_list = list() 
county = list()
for(i in 1:length(month_list)){
  out_list[[i]] = subset(count_county, admin_date == month_list[[i]])
  out_list[[i]]$admin_date = NULL
  county[[i]] =  out_list[[1]]$county
  out_list[[i]]$county = NULL
}
out_list = data.frame(out_list)
names(out_list) = c("Jul 2019", "Aug 2019", "May 2020", "June 2020", "July 2020", "Aug 2020")
county = data.frame(county = county)
names(county) = "county"
out_list = cbind(county = county, out_list)
return(out_list)
}
month_by_diag_fun(tn_schiz_dat)
```
Function above replicates
```{r}
tn_schiz_dat$month_indicator = ifelse(tn_schiz_dat$admin_date >= "2019-05-01" & tn_schiz_dat$admin_date <= "2019-08-01", "May_2019_Aug_2019", ifelse(tn_schiz_dat$admin_date >= "2020-05-01" & tn_schiz_dat$admin_date <= "2020-08-01",  "May_2020_Aug_2020", "Wrong"))
count_county = subset(tn_schiz_dat,month_indicator != "Wrong")
count_county$month_indicator = NULL
count_county <- count_county %>% modify_if(is.character, as.factor)
count_county = count_county %>% group_by(admin_date, county) %>%  count(schz, .drop = FALSE)
count_county$schz = NULL
# Add back later "2019-05-01", "2019-06-01",
month_list = list("2019-07-01", "2019-08-01", "2020-05-01", "2020-06-01", "2020-07-01", "2020-08-01")
out_list = list() 
county = list()
for(i in 1:length(month_list)){
  out_list[[i]] = subset(count_county, admin_date == month_list[[i]])
  out_list[[i]]$admin_date = NULL
  county[[i]] =  out_list[[1]]$county
  out_list[[i]]$county = NULL
}
out_list = data.frame(out_list)
names(out_list) = c("Jul 2019", "Aug 2019", "May 2020", "June 2020", "July 2020", "Aug 2020")
county = data.frame(county = county)
names(county) = "county"
out_list = cbind(county = county, out_list)
out_list

```

```{r}
count_diag
```

Now just SCHIZOAFFECTIVE 
```{r}
dat_SCHIZOAFFECTIVE = tn_schiz_dat
dat_SCHIZOAFFECTIVE$SCHIZOAFFECTIVE =  grepl("SCHIZOAFFECTIVE", dat_SCHIZOAFFECTIVE$diagnosis)
dat_SCHIZOAFFECTIVE = subset(dat_SCHIZOAFFECTIVE, SCHIZOAFFECTIVE == TRUE)
dat_SCHIZOAFFECTIVE
month_by_diag_fun(dat_SCHIZOAFFECTIVE)
```
Now just SCHIZOPHRENIA 
```{r}
dat_SCHIZOPHRENIA  = tn_schiz_dat
dat_SCHIZOPHRENIA$SCHIZOPHRENIA =  grepl("SCHIZOPHRENIA", dat_SCHIZOPHRENIA$diagnosis)
dat_SCHIZOPHRENIA = subset(dat_SCHIZOPHRENIA, SCHIZOPHRENIA == TRUE)
month_by_diag_fun(dat_SCHIZOPHRENIA)
```
Now get all others
```{r}
dat_other  = tn_schiz_dat
dat_other$SCHIZOPHRENIA =  grepl("SCHIZOPHRENIA", dat_other$diagnosis)
dat_other$SCHIZOAFFECTIVE =  grepl("SCHIZOAFFECTIVE", dat_other$diagnosis)
dat_other = subset(dat_other, SCHIZOPHRENIA == FALSE & SCHIZOAFFECTIVE == FALSE)
dat_other
month_by_diag_fun(dat_other)

```


---
title: "Test"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

Load data and clean names 
Treat <NULL> and UNKNOWN as missing
```{r}
setwd("S:/Indiana Research & Evaluation/Matthew Hanauer/CTS_grant_docs/Otsuka/data")
#tn_schiz_dat = read.csv("CTN_schz_dat_9_16_20.csv", header= TRUE, na.strings = c("<NULL>", "UNKNOWN"))

tn_data_cleaning = function(tn_schiz_dat){
## Load in the TN data set
### Add a state variable
tn_schiz_dat$state = rep("TN", dim(tn_schiz_dat)[1])


tn_schiz_data = tn_schiz_dat[c("Client.ID", "Service.Date", "Service.Location.County", "Diagnosis.Type.Diagnosis.Description", "Client.Intake.Referrals.Client.Age", "Gender.Gender", "Race.Type.Race.Type", "state", "Client.Diagnosis.Diagnosis.Sort", "Diagnosis.Type.Diagnostic.Code", "Admission.Last.Service.Date", "Admission.Intake.Date")]

names(tn_schiz_data) = c("client_id", "service_date", "county", "diagnosis", "age", "gender", "race", "state", "diagnosis_ranking", "ICD_code", "last_service_date", "intake_date")


tn_schiz_data$diagnosis_ranking = ifelse(tn_schiz_data$diagnosis_ranking == "P", 1, ifelse(tn_schiz_data$diagnosis_ranking == "S", 2, 3))

schiz_data = tn_schiz_data


schiz_data = subset( schiz_data, age > 17 | is.na(age))
sum(is.na(schiz_data$age))
sum(schiz_data$age < 18, na.rm = TRUE)
library(lubridate)

schiz_data$service_date = ymd(schiz_data$service_date)
schiz_data$last_service_date = ymd(schiz_data$last_service_date)
schiz_data$service_date =  floor_date(schiz_data$service_date, unit = "month")
schiz_data$last_service_date = floor_date(schiz_data$last_service_date, unit = "month")
schiz_data$intake_date = ymd(schiz_data$intake_date)
schiz_data$intake_date = floor_date(schiz_data$intake_date, unit = "month")
dim(schiz_data)
schiz_data = subset( schiz_data, intake_date >= "2019-07-01" & intake_date <= "2020-08-01")
dim(schiz_data)


#### For those ICD-9 codes that have equals in ICD-10 change to ICD-10
# Used this: https://www.icd10data.com/ and http://www.nyscouncil.org/wp-content/uploads/2014/01/DrD-DSM-5AlphaICD-9-10a.pdf
library(dplyr)
schiz_data$diagnosis= recode(schiz_data$diagnosis, "UNSPECIFIED SCHIZOPHRENIA SPECTRUM AND OTHER PSYCHOTIC DISORDER"= "UNSPECIFIED PSYCHOSIS NOT DUE TO A SUBSTANCE OR KNOWN PHYSIOLOGICAL CONDITION", "PSYCHOTIC DISORDER DUE TO ANOTHER MEDICAL CONDITION  WITH DELUSIONS" = "PSYCHOTIC DISORDER WITH DELUSIONS DUE TO KNOWN PHYSIOLOGICAL CONDITION",  "PSYCHOTIC DISORDER DUE TO ANOTHER MEDICAL CONDITION  WITH HALLUCINATIONS" = "PSYCHOTIC DISORDER WITH HALLUCINATIONS DUE TO KNOWN PHYSIOLOGICAL CONDITION", "UNSPECIFIED PSYCHOSIS" = "UNSPECIFIED PSYCHOSIS NOT DUE TO A SUBSTANCE OR KNOWN PHYSIOLOGICAL CONDITION")
sum(schiz_data$diagnosis == "UNSPECIFIED PSYCHOSIS")


#Figure out all the codes now
#These are the codes for unspecified and SCHIZOPHRENIA
#SCHIZOPHRENIA, UNSPECIFIED
#SCHIZOAFFECTIVE DISORDER, UNSPECIFIED
#OTHER SCHIZOAFFECTIVE DISORDERS
#UNDIFFERENTIATED SCHIZOPHRENIA
#OTHER SCHIZOPHRENIA
#OTHER PSYCHOTIC DISORDER NOT DUE TO A SUBSTANCE OR KNOWN PHYSIOLOGICAL CONDITION
#UNSPECIFIED SCHIZOPHRENIA SPECTRUM AND OTHER PSYCHOTIC DISORDER
#OTHER SPECIFIED SCHIZOPHRENIA SPECTRUM AND OTHER PSYCHOTIC DISORDER
#SCHIZOPHRENIA  DISORGANIZED TYPE UNSPECIFIED


schiz_data$schz = rep(1, dim(schiz_data)[1])
#### Running just TN schiz data
#Now I want the number of clients with unique intake dates
#We are assuming an intake means a new episode of care
#So we need a new ID that is the combination of intake_date and ID and then only keep those that are unique
#Only clients who have unique intake dates.
#So I client could be a duplicate, but they have a new intake date so we are assuming the client is new

schiz_data$id_intake_date = paste0(schiz_data$client_id, schiz_data$intake_date)
dim(schiz_data)
schiz_data = schiz_data = schiz_data %>% distinct(id_intake_date, .keep_all = TRUE)
return(schiz_data)
}
schiz_data = tn_data_cleaning(tn_schiz_dat)
n = dim(schiz_data)[1]
schiz_data
```
Number of duplicate IDs which means person who had multiple unique intakes within the time frame
```{r}
dup_ids = duplicated(schiz_data$client_id)
sum(dup_ids)
```


Check descriptives
```{r}
library(prettyR)
apply(schiz_data[-1], 2, function(x){describe.factor(x)})
```


Number of clients per month with an admin of psychosis
```{r}
count_month =  schiz_data %>% count(intake_date)
count_month$percentage_pop = round(count_month$n / n,2)*100
count_month$schz = NULL
write.csv(count_month, "tn_count_month.csv", row.names = FALSE)
```


Table by diagnosis
```{r}
count_diag =  schiz_data %>% count(diagnosis) 
count_diag = count_diag[order(count_diag$n, decreasing = TRUE),]
count_diag$percentage_pop = round(count_diag$n / n,2)*100
count_diag
```
Check function is correct
```{r}

count_county <- schiz_data %>% modify_if(is.character, as.factor)
count_county = count_county %>% group_by(intake_date, county) %>%  count(schz, .drop = FALSE)
count_county$schz = NULL
count_county = na.omit(count_county)
count_county
```


Monthly count of all diagnosis by county 
You need to remove the 2 NA counties from 3-01-2020 
```{r}
month_by_diag_fun = function(data){

count_county <- data %>% modify_if(is.character, as.factor)
count_county = count_county %>% group_by(intake_date, county) %>%  count(schz, .drop = FALSE)
count_county$schz = NULL
count_county = na.omit(count_county)
month_list = list("2019-07-01", "2019-08-01", "2019-09-01", "2019-10-01", "2019-11-01", "2019-12-01", "2020-01-01", "2020-02-01", "2020-03-01", "2020-04-01", "2020-05-01", "2020-06-01", "2020-07-01", "2020-08-01")
out_list = list() 
county = list()
for(i in 1:length(month_list)){
  out_list[[i]] = subset(count_county, intake_date == month_list[[i]])
  out_list[[i]]$intake_date = NULL
  county[[i]] =  out_list[[1]]$county
  out_list[[i]]$county = NULL
}
out_list = data.frame(out_list)
names(out_list) = c("Jul 2019", "Aug 2019", "Sep 2019", "Oct 2019", "Nov 2019", "Dec 2019", "Jan 2020", "Feb 2020", "Mar 2020", "Apr 2020", "May 2020", "June 2020", "July 2020", "Aug 2020")
county = data.frame(county = county)
names(county) = "county"
out_list = cbind(county = county, out_list)
return(out_list)
}

tn_all_county_by_month = month_by_diag_fun(schiz_data)
tn_all_county_by_month$sum = apply(tn_all_county_by_month[-1], 1, mean)
tn_all_county_by_month = tn_all_county_by_month[order(-tn_all_county_by_month$sum),]
tn_all_county_by_month$sum = NULL

write.csv(tn_all_county_by_month, "tn_all_county_by_month.csv", row.names = FALSE)
```


Now just SCHIZOAFFECTIVE 
```{r}
dat_SCHIZOAFFECTIVE =  schiz_data
dat_SCHIZOAFFECTIVE$SCHIZOAFFECTIVE =  grepl("SCHIZOAFFECTIVE", dat_SCHIZOAFFECTIVE$diagnosis)
dat_SCHIZOAFFECTIVE = subset(dat_SCHIZOAFFECTIVE, SCHIZOAFFECTIVE == TRUE)

tn_SCHIZOAFFECTIVE_county_by_month =  month_by_diag_fun(dat_SCHIZOAFFECTIVE)
tn_SCHIZOAFFECTIVE_county_by_month$sum = apply(tn_SCHIZOAFFECTIVE_county_by_month[-1], 1, mean)
tn_SCHIZOAFFECTIVE_county_by_month = tn_SCHIZOAFFECTIVE_county_by_month[order(-tn_SCHIZOAFFECTIVE_county_by_month$sum),]
tn_SCHIZOAFFECTIVE_county_by_month$sum = NULL
write.csv(tn_SCHIZOAFFECTIVE_county_by_month, "tn_SCHIZOAFFECTIVE_county_by_month.csv", row.names = FALSE)
```
Now just SCHIZOPHRENIA 
```{r}
dat_SCHIZOPHRENIA  =  schiz_data
dat_SCHIZOPHRENIA$SCHIZOPHRENIA =  grepl("SCHIZOPHRENIA", dat_SCHIZOPHRENIA$diagnosis)
dat_SCHIZOPHRENIA = subset(dat_SCHIZOPHRENIA, SCHIZOPHRENIA == TRUE)
tn_SCHIZOPHRENIA_county_by_month =  month_by_diag_fun(dat_SCHIZOPHRENIA)
tn_SCHIZOPHRENIA_county_by_month$sum = apply(tn_SCHIZOPHRENIA_county_by_month[-1], 1, mean)
tn_SCHIZOPHRENIA_county_by_month = tn_SCHIZOPHRENIA_county_by_month[order(-tn_SCHIZOPHRENIA_county_by_month$sum),]
tn_SCHIZOPHRENIA_county_by_month$sum = NULL

write.csv(tn_SCHIZOPHRENIA_county_by_month, "tn_SCHIZOPHRENIA_county_by_month.csv", row.names = FALSE)
```
Now get all others
```{r}
dat_other  =  schiz_data
dat_other$SCHIZOPHRENIA =  grepl("SCHIZOPHRENIA", dat_other$diagnosis)
dat_other$SCHIZOAFFECTIVE =  grepl("SCHIZOAFFECTIVE", dat_other$diagnosis)
dat_other = subset(dat_other, SCHIZOPHRENIA == FALSE & SCHIZOAFFECTIVE == FALSE)
tn_other_county_by_month = month_by_diag_fun(dat_other)
write.csv(tn_other_county_by_month, "tn_other_county_by_month.csv", row.names = FALSE)

```


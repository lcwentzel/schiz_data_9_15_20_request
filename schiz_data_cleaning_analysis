---
title: "Test"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

Load data and clean names 
Treat <NULL> and UNKNOWN as missing
```{r}
setwd("S:/Indiana Research & Evaluation/Matthew Hanauer/CTS_grant_docs/Otsuka/data")
#ci_cl_schiz_dat = read.csv("CIN_CIL_schz_dat_9_16_20.csv", header = TRUE, na.strings = c("<NULL>", "UNKNOWN"))
### Need Client.ID, Admission.Last.Service.Date, Service.Location.County, Diagnosis.Type.Diagnosis.Description, Client.Intake.Referrals.Client.Age, Gender.Gender, Race.Type.Race.Type
ci_cl_schiz_dat

ci_cl_schiz_data = ci_cl_schiz_dat[c("Client.ID", "Service.Date", "Service.Location.County", "Client.Diagnosis.Diagnosis.Description", "Service.Age.at.Service", "Gender.Gender", "Race.Type.Race.Type", "Organization.Master.Organization.Headquarters.State.Abbreviation", "Client.Diagnosis.Ranking.Code", "Client.Diagnosis.ICD.Code", "Organization.Master.Last.Service.Date.Reported")]


names(ci_cl_schiz_data) = c("client_id", "service_date", "county", "diagnosis", "age", "gender", "race", "state", "diagnosis_ranking", "ICD_code", "last_service_date")

### Florida data
#fl_schiz_dat = read.csv("FL_schz_dat_9_16_20.csv", header = TRUE, na.strings = c("<NULL>", "UNKNOWN"))

fl_schiz_data =  fl_schiz_dat[c("Client.ID", "Service.Date", "Service.Location.County", "Client.Diagnosis.Diagnosis.Description", "Service.Age.at.Service", "Gender.Gender", "Race.Type.Race.Type", "Organization.Master.Organization.Headquarters.State.Abbreviation", "Client.Diagnosis.Ranking.Code", "Client.Diagnosis.ICD.Code", "Organization.Master.Last.Service.Date.Reported")]

names(fl_schiz_data) = c("client_id", "service_date", "county", "diagnosis", "age", "gender", "race", "state", "diagnosis_ranking", "ICD_code", "last_service_date")

## Load in the TN data set
#tn_schiz_dat = read.csv("CTN_schz_dat_9_16_20.csv", header= TRUE, na.strings = c("<NULL>", "UNKNOWN"))
### Add a state variable

tn_schiz_dat$state = rep("TN", dim(tn_schiz_dat)[1])


### For all data combined
#tn_schiz_data = tn_schiz_dat[c("Client.ID", "Service.Date", "Service.Location.County", "Diagnosis.Type.Diagnosis.Description", "Client.Intake.Referrals.Client.Age", "Gender.Gender", "Race.Type.Race.Type", "state", "Client.Diagnosis.Diagnosis.Sort", "Diagnosis.Type.Diagnostic.Code", "Admission.Last.Service.Date")]


tn_schiz_data = tn_schiz_dat[c("Client.ID", "Service.Date", "Service.Location.County", "Diagnosis.Type.Diagnosis.Description", "Client.Intake.Referrals.Client.Age", "Gender.Gender", "Race.Type.Race.Type", "state", "Client.Diagnosis.Diagnosis.Sort", "Diagnosis.Type.Diagnostic.Code", "Admission.Last.Service.Date", "Admission.Intake.Date")]


## Change ranking variable to match non-TN
## For all combined data
names(tn_schiz_data) = c("client_id", "service_date", "county", "diagnosis", "age", "gender", "race", "state", "diagnosis_ranking", "ICD_code", "last_service_date")

names(tn_schiz_data) = c("client_id", "service_date", "county", "diagnosis", "age", "gender", "race", "state", "diagnosis_ranking", "ICD_code", "last_service_date", "intake_date")


tn_schiz_data$diagnosis_ranking = ifelse(tn_schiz_data$diagnosis_ranking == "P", 1, ifelse(tn_schiz_data$diagnosis_ranking == "S", 2, 3))
describe.factor(tn_schiz_data$diagnosis_ranking)

# Now rbind all data
#schiz_data = rbind(ci_cl_schiz_data, fl_schiz_data, tn_schiz_data)
### Running just TN data
schiz_data = tn_schiz_data

library(prettyR)

schiz_data = subset( schiz_data, age > 17 | is.na(age))
sum(is.na(schiz_data$age))
sum(schiz_data$age < 18, na.rm = TRUE)
library(lubridate)

schiz_data$service_date = ymd(schiz_data$service_date)
schiz_data$last_service_date = ymd(schiz_data$last_service_date)
schiz_data$service_date =  floor_date(schiz_data$service_date, unit = "month")
schiz_data$last_service_date = floor_date(schiz_data$last_service_date, unit = "month")
schiz_data$intake_date = ymd(schiz_data$intake_date)
schiz_data$intake_date = floor_date(schiz_data$intake_date, unit = "month")
schiz_data = subset( schiz_data, service_date >= "2019-07-01" & service_date <= "2020-08-01")



#### For those ICD-9 codes that have equals in ICD-10 change to ICD-10
# Used this: https://www.icd10data.com/ and http://www.nyscouncil.org/wp-content/uploads/2014/01/DrD-DSM-5AlphaICD-9-10a.pdf
schiz_data$diagnosis= recode(schiz_data$diagnosis, "UNSPECIFIED SCHIZOPHRENIA SPECTRUM AND OTHER PSYCHOTIC DISORDER"= "UNSPECIFIED PSYCHOSIS NOT DUE TO A SUBSTANCE OR KNOWN PHYSIOLOGICAL CONDITION", "PSYCHOTIC DISORDER DUE TO ANOTHER MEDICAL CONDITION  WITH DELUSIONS" = "PSYCHOTIC DISORDER WITH DELUSIONS DUE TO KNOWN PHYSIOLOGICAL CONDITION",  "PSYCHOTIC DISORDER DUE TO ANOTHER MEDICAL CONDITION  WITH HALLUCINATIONS" = "PSYCHOTIC DISORDER WITH HALLUCINATIONS DUE TO KNOWN PHYSIOLOGICAL CONDITION", "UNSPECIFIED PSYCHOSIS" = "UNSPECIFIED PSYCHOSIS NOT DUE TO A SUBSTANCE OR KNOWN PHYSIOLOGICAL CONDITION")
sum(schiz_data$diagnosis == "UNSPECIFIED PSYCHOSIS")


#Figure out all the codes now
#These are the codes for unspecified and SCHIZOPHRENIA
#SCHIZOPHRENIA, UNSPECIFIED
#SCHIZOAFFECTIVE DISORDER, UNSPECIFIED
#OTHER SCHIZOAFFECTIVE DISORDERS
#UNDIFFERENTIATED SCHIZOPHRENIA
#OTHER SCHIZOPHRENIA
#OTHER PSYCHOTIC DISORDER NOT DUE TO A SUBSTANCE OR KNOWN PHYSIOLOGICAL CONDITION
#UNSPECIFIED SCHIZOPHRENIA SPECTRUM AND OTHER PSYCHOTIC DISORDER
#OTHER SPECIFIED SCHIZOPHRENIA SPECTRUM AND OTHER PSYCHOTIC DISORDER
#SCHIZOPHRENIA  DISORGANIZED TYPE UNSPECIFIED

#Create a unspecified schiz variable
library(prettyR)
schiz_data$unspec_var = ifelse(schiz_data$diagnosis == "SCHIZOPHRENIA, UNSPECIFIED" | schiz_data$diagnosis== "SCHIZOAFFECTIVE DISORDER, UNSPECIFIED" | schiz_data$diagnosis == "OTHER SCHIZOAFFECTIVE DISORDERS" | schiz_data$diagnosis == "UNDIFFERENTIATED SCHIZOPHRENIA" | schiz_data$diagnosis == "OTHER SCHIZOPHRENIA" | schiz_data$diagnosis == "OTHER PSYCHOTIC DISORDER NOT DUE TO A SUBSTANCE OR KNOWN PHYSIOLOGICAL CONDITION" | schiz_data$diagnosis == "UNSPECIFIED SCHIZOPHRENIA SPECTRUM AND OTHER PSYCHOTIC DISORDER" | schiz_data$diagnosis == "OTHER SPECIFIED SCHIZOPHRENIA SPECTRUM AND OTHER PSYCHOTIC DISORDER" | schiz_data$diagnosis == "SCHIZOPHRENIA  DISORGANIZED TYPE UNSPECIFIED", 1, 0)


schiz_data$month_id_check = NULL
schiz_data$dup_id_date = NULL
schiz_data$dup_id_date_true = NULL
n = dim(schiz_data)[1]
schiz_data$schz = rep(1, dim(schiz_data)[1])
#### Running just TN schiz data
#Now I want the number of clients with unique intake dates
#We are assuming an intake means a new episode of care
#So we need a new ID that is the combination of intake_date and ID and then only keep those that are unique
#Only clients who have unique intake dates.
#So I client could be a duplicate, but they have a new intake date so we are assuming the client is new

schiz_data$id_intake_date = paste0(schiz_data$client_id, schiz_data$intake_date)
dim(schiz_data)
schiz_data = schiz_data = schiz_data %>% distinct(id_intake_date, .keep_all = TRUE)
```

Check descriptives
```{r}
apply(schiz_data[-1], 2, function(x){describe.factor(x)})
```


Number of clients per month with a psychosis diagnosis who received a service
```{r}
dim(all_dat)[1]-dim(all_dat_unique)[1]

count_month =  schiz_data %>% count(service_date)
count_month$percentage_pop = round(count_month$n / n,2)*100
count_month$schz = NULL
count_month
```


Table by diagnosis
```{r}
count_diag =  schiz_data %>% count(diagnosis) 
count_diag = count_diag[order(count_diag$n, decreasing = TRUE),]
count_diag$percentage_pop = round(count_diag$n / n,2)*100
count_diag
```



Table by county by four month period
We want the count by four month period (May 2019 to Aug 2019) and compare to same period 2020 by county and state
Start with county then get state
```{r}
n = dim( schiz_data)[1]
# Create the two four month indicators July_2019_Aug_2019 and July_2020_Aug_2020
schiz_data$month_indicator = ifelse( schiz_data$service_date >= "2019-07-01" &  schiz_data$service_date <= "2019-08-01", "July_2019_Aug_2019", ifelse( schiz_data$service_date >= "2020-07-01" &  schiz_data$service_date <= "2020-08-01",  "July_2020_Aug_2020", "Wrong"))
count_county = subset( schiz_data,month_indicator != "Wrong")
library(tidyverse)
## Need this plus .drop = FALSE to include counting zeros
count_county <- count_county %>% modify_if(is.character, as.factor)
count_county
count_county = count_county %>% group_by(county, month_indicator) %>%  count(schz, .drop = FALSE)
count_county
July_2019_Aug_2019 = subset(count_county, month_indicator == "July_2019_Aug_2019")
July_2020_Aug_2020 = subset(count_county, month_indicator == "July_2020_Aug_2020") 
count_county = data.frame(county = July_2019_Aug_2019$county, July_2019_Aug_2019 = July_2019_Aug_2019$n , July_2020_Aug_2020 = July_2020_Aug_2020$n)
count_county
```
Monthly count of all diagnosis by county
```{r}
month_by_diag_fun = function(data){

data$month_indicator = ifelse(data$service_date >= "2019-05-01" & data$service_date <= "2019-08-01", "May_2019_Aug_2019", ifelse(data$service_date >= "2020-05-01" & data$service_date <= "2020-08-01",  "May_2020_Aug_2020", "Wrong"))
count_county = subset(data,month_indicator != "Wrong")
count_county$month_indicator = NULL
count_county <- count_county %>% modify_if(is.character, as.factor)
count_county = count_county %>% group_by(service_date, county) %>%  count(schz, .drop = FALSE)
count_county$schz = NULL
# Add back later "2019-05-01", "2019-06-01",
month_list = list("2019-07-01", "2019-08-01", "2020-05-01", "2020-06-01", "2020-07-01", "2020-08-01")
out_list = list() 
county = list()
for(i in 1:length(month_list)){
  out_list[[i]] = subset(count_county, service_date == month_list[[i]])
  out_list[[i]]$service_date = NULL
  county[[i]] =  out_list[[1]]$county
  out_list[[i]]$county = NULL
}
out_list = data.frame(out_list)
names(out_list) = c("Jul 2019", "Aug 2019", "May 2020", "June 2020", "July 2020", "Aug 2020")
county = data.frame(county = county)
names(county) = "county"
out_list = cbind(county = county, out_list)
return(out_list)
}

test = month_by_diag_fun(schiz_data)
write.csv(test, "test.csv", row.names = FALSE)
```
Function above replicates
```{r}
 schiz_data$month_indicator = ifelse( schiz_data$service_date >= "2019-05-01" &  schiz_data$service_date <= "2019-08-01", "May_2019_Aug_2019", ifelse( schiz_data$service_date >= "2020-05-01" &  schiz_data$service_date <= "2020-08-01",  "May_2020_Aug_2020", "Wrong"))
count_county = subset( schiz_data,month_indicator != "Wrong")
count_county$month_indicator = NULL
count_county <- count_county %>% modify_if(is.character, as.factor)
count_county = count_county %>% group_by(service_date, county) %>%  count(schz, .drop = FALSE)
count_county$schz = NULL
# Add back later "2019-05-01", "2019-06-01",
month_list = list("2019-07-01", "2019-08-01", "2020-05-01", "2020-06-01", "2020-07-01", "2020-08-01")
out_list = list() 
county = list()
for(i in 1:length(month_list)){
  out_list[[i]] = subset(count_county, service_date == month_list[[i]])
  out_list[[i]]$service_date = NULL
  county[[i]] =  out_list[[1]]$county
  out_list[[i]]$county = NULL
}
out_list = data.frame(out_list)
names(out_list) = c("Jul 2019", "Aug 2019", "May 2020", "June 2020", "July 2020", "Aug 2020")
county = data.frame(county = county)
names(county) = "county"
out_list = cbind(county = county, out_list)
out_list

```

Now just SCHIZOAFFECTIVE 
```{r}
dat_SCHIZOAFFECTIVE =  schiz_data
dat_SCHIZOAFFECTIVE$SCHIZOAFFECTIVE =  grepl("SCHIZOAFFECTIVE", dat_SCHIZOAFFECTIVE$diagnosis)
dat_SCHIZOAFFECTIVE = subset(dat_SCHIZOAFFECTIVE, SCHIZOAFFECTIVE == TRUE)
dat_SCHIZOAFFECTIVE
month_by_diag_fun(dat_SCHIZOAFFECTIVE)
```
Now just SCHIZOPHRENIA 
```{r}
dat_SCHIZOPHRENIA  =  schiz_data
dat_SCHIZOPHRENIA$SCHIZOPHRENIA =  grepl("SCHIZOPHRENIA", dat_SCHIZOPHRENIA$diagnosis)
dat_SCHIZOPHRENIA = subset(dat_SCHIZOPHRENIA, SCHIZOPHRENIA == TRUE)
month_by_diag_fun(dat_SCHIZOPHRENIA)
```
Now get all others
```{r}
dat_other  =  schiz_data
dat_other$SCHIZOPHRENIA =  grepl("SCHIZOPHRENIA", dat_other$diagnosis)
dat_other$SCHIZOAFFECTIVE =  grepl("SCHIZOAFFECTIVE", dat_other$diagnosis)
dat_other = subset(dat_other, SCHIZOPHRENIA == FALSE & SCHIZOAFFECTIVE == FALSE)
dat_other
month_by_diag_fun(dat_other)

```

